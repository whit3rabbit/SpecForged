name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Run tests
      run: |
        uv run pytest tests/ -v --tb=short

    - name: Test package import
      run: |
        uv run python -c "from src.specforged import __version__; print(f'SpecForge version: {__version__}')"
        uv run python -c "from src.specforged.models import UserMode; print(f'UserMode test: {UserMode.CHAT.value}')"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Format check
      run: |
        uv run black --check --diff src/ tests/

    - name: Lint
      run: |
        uv run flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Type check
      run: |
        uv run mypy src/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Build package
      run: |
        uv build

    - name: Verify package structure
      run: |
        python -m zipfile -l dist/*.whl
        python -c "
        import zipfile, sys, glob
        wheel_file = glob.glob('dist/*.whl')[0]
        with zipfile.ZipFile(wheel_file) as z:
            files = z.namelist()
            assert 'specforged/__init__.py' in files, 'Missing __init__.py'
            assert 'specforged/cli.py' in files, 'Missing cli.py'
            assert any('entry_points.txt' in f for f in files), 'Missing entry points'
        print('✓ Package structure verified')
        "

    - name: Test wheel installation (dry run)
      run: |
        python -m pip install --dry-run --no-deps dist/*.whl
        echo "✓ Wheel installation check passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7
